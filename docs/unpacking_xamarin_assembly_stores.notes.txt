================================
"assemblies.blob" file contents:
================================
20 = header
------------ for each LOCAL, sorted by `json_data.assemblies[n].blob_idx`:
24 = table of contents entry, which includes DataOffset and DataSize to extract DLL data from blob
------------ for each GLOBAL, sorted by `json_data.assemblies[n].hash32`:
20 = hash32 of filename
------------ for each GLOBAL, sorted by `json_data.assemblies[n].hash64`:
20 = hash64 of filename
------------ for each LOCAL, sorted by `json_data.assemblies[n].blob_idx`:
DataSize = DLL data
------------

======
where:
======
* the current assembly store is identified by:
    `json_data.stores[i]`
* the primary assembly store is identified by:
    `json_data.stores[i].store_id` === `0`
* LOCAL is a count of:
    - all assemblies in the current assembly store, indicated by:
        `json_data.stores[i].store_id` === `json_data.assemblies[n].store_id`
* GLOBAL is a count of:
    - all LOCAL assemblies
    - assemblies in each architecture-specific blob
* all architecture-specific blobs share the same list of filenames
* `json_data.stores[i].lec` = LOCAL
* `json_data.stores[i].gec` = GLOBAL

=============================================
primary vs. architecture-specific blob files:
=============================================
* only the primary "assemblies.blob" file includes:
  - hash32
  - hash64
* architecture-specific blob files exclude these blocks

======
notes:
======
* `json_data.assemblies[n].hash32` and
  `json_data.assemblies[n].hash64`
  - these fields are strings that contain hex-encoded values (ex: "0x12345")
  - hash64 values are too large for Number, and require BigInt
  - sorting on these fields is performed on the string representation
    * lexicographical sort order of hex-encoded strings
      is the same ordering as numerical sort used on decoded values
